trigger:
- main

pool:
  vmImage: 'macos-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '23.x'
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install and build'


- task: DownloadSecureFile@1
  name: downloadKeystore
  inputs:
    secureFile: 'my-upload-key.keystore'
  displayName: 'Download Keystore File'

- task: InstallAppleCertificate@2 
  name: appleCertificate
  displayName: Install Apple Certificate
  inputs:
      certSecureFile: 'Dist_Certificates 2.p12'
      # certPwd: '$(AppleCertificatePassword)'
      keychain: 'temp'
      deleteCert: true
- task: InstallAppleProvisioningProfile@1
  name: appleProvisioningProfile
  displayName: 'Install Apple Provisioning Profile'
  inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'eHealthDistProfile_22_Jan_2025.mobileprovision'
      removeProfile: true
- task: CocoaPods@0
  displayName: 'Install CocoaPods'
  inputs:
      workingDirectory: 'ios'

# - script: |
#     echo Installing $(downloadKeystore.secureFilePath) to the trusted CA directory...
#     cp $(downloadKeystore.secureFilePath) ./
#     cp $(appleCertificate.secureFilePath) ./
#     cp $(appleProvisioningProfile.secureFilePath) ./
#     ls
#     pwd
#   displayName: ' build'

# - task: Gradle@3
#   inputs:
#     gradleWrapperFile: 'android/gradlew'
#     workingDirectory: 'android/'
#     options: '-PversionName=$(Build.BuildNumber) -PversionCode=$(Build.BuildId)'
#     tasks: 'assembleRelease'
#     publishJUnitResults: false
#     javaHomeOption: 'JDKVersion'
#     gradleOptions: '-Xmx3072m'

# - task: AndroidSigning@3
#   inputs:
#     apkFiles: '**/*.apk'
#     apksignerKeystoreFile: '$(MYAPP_UPLOAD_STORE_FILE)'  
#     apksignerKeystorePassword: '$(MYAPP_UPLOAD_STORE_PASSWORD)'
#     apksignerKeystoreAlias: '$(MYAPP_UPLOAD_KEY_ALIAS)'
#     apksignerKeyPassword: '$(MYAPP_UPLOAD_KEY_PASSWORD)'
#     zipalign: false

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish APK to artifacts'
#   inputs:
#     PathtoPublish: 'android/app/build/outputs/apk/release'
#     ArtifactName: 'android'
#     publishLocation: 'Container'

# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'subscription'  
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#       # Check if the variables are set correctly
#       echo "STORAGE_ACCOUNT: $(STORAGE_ACCOUNT)"
#       echo "CONTAINER_NAME: $(CONTAINER_NAME)"

#       # Upload only .apk files to Azure Blob Storage using Azure CLI
#       az storage blob upload-batch \
#         --account-name $STORAGE_ACCOUNT \
#         --destination $CONTAINER_NAME/react-native-builds/ \
#         --source $(System.DefaultWorkingDirectory)/android/app/build/outputs/apk/release/ \
#         --pattern '*.apk'  
#   displayName: 'Upload APK to Azure Blob Storage using Azure CLI'
