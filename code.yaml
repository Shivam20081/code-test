trigger:
- main

pool:
  vmImage: 'macos-latest'

variables:
  TIMESTAMP: $[format('{0:yyyyMMddHHmmss}', pipeline.startTime)] # Generate timestamp for unique APK names

steps:
# Step 1: Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '23.x'
  displayName: 'Install Node.js'

# Step 2: Install dependencies
- script: |
    npm install
  displayName: 'Install Dependencies'

# Step 3: Download Secure Keystore File
- task: DownloadSecureFile@1
  name: downloadKeystore
  inputs:
    secureFile: 'my-upload-key.keystore'
  displayName: 'Download Keystore File'

# Step 4: Build APK
- script: |
    echo Installing $(downloadKeystore.secureFilePath) to the trusted CA directory...
    cp $(downloadKeystore.secureFilePath) ./android/app/
    cd android
    ./gradlew assembleRelease -PversionName=$(Build.BuildNumber) -PversionCode=$(Build.BuildId)
  displayName: 'Build APK'

# Step 5: Rename APK with Timestamp
- script: |
    mkdir -p android/app/build/outputs/apk/release
    mv android/app/build/outputs/apk/release/app-release.apk \
       android/app/build/outputs/apk/release/app-release-$(TIMESTAMP).apk
    echo "Generated APK: app-release-$(TIMESTAMP).apk"
  displayName: 'Rename APK with Timestamp'

# Step 6: Sign APK
- task: AndroidSigning@3
  inputs:
    apkFiles: 'android/app/build/outputs/apk/release/app-release-$(TIMESTAMP).apk'
    apksignerKeystoreFile: '$(MYAPP_UPLOAD_STORE_FILE)'
    apksignerKeystorePassword: '$(MYAPP_UPLOAD_STORE_PASSWORD)'
    apksignerKeystoreAlias: '$(MYAPP_UPLOAD_KEY_ALIAS)'
    apksignerKeyPassword: '$(MYAPP_UPLOAD_KEY_PASSWORD)'
    zipalign: false
  displayName: 'Sign APK'

# Step 7: Publish APK Artifact
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'android/app/build/outputs/apk/release'
    ArtifactName: 'android'
    publishLocation: 'Container'
  displayName: 'Publish APK as Build Artifact'

# Step 8: Upload APK to Azure Blob Storage
- task: AzureCLI@2
  inputs:
    azureSubscription: 'subscription'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Uploading APK to Azure Blob Storage..."
      az storage blob upload \
        --account-name $STORAGE_ACCOUNT \
        --container-name $CONTAINER_NAME \
        --file android/app/build/outputs/apk/release/app-release-$(TIMESTAMP).apk \
        --name react-native-builds/app-release-$(TIMESTAMP).apk \
        --auth-mode login \
        --overwrite
  displayName: 'Upload APK to Azure Blob Storage'
